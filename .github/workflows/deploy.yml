name: Deploy to ECS (CortexCode)

on:
  push:
    branches: [main]

jobs:
  deploy:
    name: Build and Deploy to AWS ECS
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REPO: ${{ secrets.ECR_REPO_URL }}/cortexcode-app
      ECS_CLUSTER: cortexcode-cluster
      ECS_SERVICE: cortexcode-service
      ECS_TASK_DEFINITION: cortexcode-task

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.ECR_REPO_URL }}

    - name: Build Docker Image
      run: |
        docker build -t cortexcode-app .

    - name: Tag and Push to ECR
      run: |
        docker tag cortexcode-app:latest $ECR_REPO:latest
        docker push $ECR_REPO:latest

    - name: Render Task Definition with Secrets
      run: |
        sed -e "s|<your-ecr-url>|${{ secrets.ECR_REPO_URL }}|g"             -e "s|<your_supabase_url>|${{ secrets.SUPABASE_URL }}|g"             -e "s|<your_supabase_key>|${{ secrets.SUPABASE_KEY }}|g"             -e "s|<your_openai_key>|${{ secrets.OPENAI_API_KEY }}|g"             ecs_task_definition.json > ecs_task_definition_rendered.json

    - name: Register New Task Definition
      run: |
        aws ecs register-task-definition           --cli-input-json file://ecs_task_definition_rendered.json

    - name: Update ECS Service
      run: |
        aws ecs update-service --cluster $ECS_CLUSTER           --service $ECS_SERVICE           --force-new-deployment
